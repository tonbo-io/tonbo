-- Bootstrap SQL script for Tonbo's centralized metadata storage of LSM-tree manifest

BEGIN;

-- ULID

DO $$ BEGIN
    CREATE DOMAIN ULID AS CHAR(26); -- https://github.com/ulid/spec
    EXCEPTION
        WHEN duplicate_object THEN null;
END $$;

-- Last modification timestamp auditing trigger

DO $$ BEGIN
    IF EXISTS (SELECT 1 FROM information_schema.routines
                        WHERE routine_name = 'last_modified_audit')
    THEN
        RAISE NOTICE 'Function last_modified_audit exists. Skipping creation.';
    ELSE
        CREATE FUNCTION last_modified_audit() RETURNS trigger AS $BODY$
            BEGIN
                NEW.last_modified := current_timestamp;
                NEW.last_modified_by := current_user;
                RETURN NEW;
            END;
        $BODY$ LANGUAGE plpgsql;
    END IF;
END $$;

-- Enum types

DO $$ BEGIN
    CREATE TYPE FILE_TYPE AS ENUM(
        'Parquet',
        'Wal',
        'Log'
    );
    EXCEPTION  -- makes this script idempotent -- if the type already exists, don't fail.
        WHEN duplicate_object THEN null;
END $$;

DO $$ BEGIN
    CREATE TYPE FILE_SYSTEM AS ENUM(
        'Local', 
        'S3' -- TODO @liguoso: use JSONB to hold s3 location entity
    );
    EXCEPTION 
        WHEN duplicate_object THEN null;
END $$;


-- Note: table is not used at this moment
CREATE TABLE IF NOT EXISTS db_options (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  basePath TEXT NOT NULL,
  baseFs FILE_SYSTEM NOT NULL,
  levelPaths TEXT[],
  levelFs FILE_SYSTEM[]
);

-- Note: table is not used at this moment
CREATE TABLE IF NOT EXISTS dbs (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  db_option_id INTEGER,

  FOREIGN KEY (db_option_id) REFERENCES db_options(id)
);

-- Note: table is not used at this moment
CREATE TABLE IF NOT EXISTS files (
    id ULID PRIMARY KEY,
    file_type FILE_TYPE NOT NULL,
    level SMALLINT NOT NULL
);

CREATE TABLE IF NOT EXISTS scopes (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    file_id ULID NOT NULL,
    size BIGINT NOT NULL,
    min_key BYTEA NOT NULL,
    max_key BYTEA NOT NULL,

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT

    -- TODO: Reference files(id) after s3 location is modeled
);
CREATE OR REPLACE TRIGGER audit_scopes BEFORE INSERT OR UPDATE OR DELETE ON scopes FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

CREATE TABLE IF NOT EXISTS scope_wal_files (
    file_id ULID REFERENCES files(id),
    scope_id INTEGER REFERENCES scopes(id),
    PRIMARY KEY (scope_id, file_id),

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT
);
CREATE OR REPLACE TRIGGER audit_scope_wal_files BEFORE INSERT OR UPDATE OR DELETE ON scope_wal_files FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

-- We will always create new row for a new version of manifest meatdata
-- Old version will be deleted after there is no active transaction asynchronouslly
CREATE TABLE IF NOT EXISTS version_snapshots (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    timestamp INTEGER NOT NULL,
    log_length INTEGER NOT NULL,
    -- TODO: Support multi-tenant isolation by referencing to dbs(id) table

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS version_snapshot_leveled_scopes (
    version_snapshot_id INTEGER REFERENCES version_snapshots(id) ON DELETE RESTRICT,
    row_index INTEGER NOT NULL,
    col_index INTEGER NOT NULL,
    scope_id INTEGER REFERENCES scopes(id) ON DELETE RESTRICT,
    PRIMARY KEY (version_snapshot_id, row_index, col_index),
    
    CONSTRAINT valid_row_index CHECK (row_index >= 0 AND row_index <= 7), -- harded coded MAX_LEVEL 
    CONSTRAINT valid_col_index CHECK (col_index >= 0),

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT
);
CREATE INDEX idx_version_snapshot_leveled_scopes ON version_snapshot_leveled_scopes(scope_id);
CREATE INDEX idx_version_snapshot_leveled_scopes_position ON version_snapshot_leveled_scopes(version_snapshot_id, row_index, col_index);
CREATE OR REPLACE TRIGGER audit_version_snapshot_leveled_scopes BEFORE INSERT OR UPDATE OR DELETE ON version_snapshot_leveled_scopes FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

CREATE TABLE IF NOT EXISTS version_snapshot_active_wal_files (
    file_id ULID NOT NULL,
    version_snapshot_id INTEGER REFERENCES version_snapshots(id),
    PRIMARY KEY (version_snapshot_id, file_id),

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT

    -- TODO: Reference files(id) after s3 location is modeled
);
CREATE OR REPLACE TRIGGER audit_version_snapshot_active_wal_files BEFORE INSERT OR UPDATE OR DELETE ON version_snapshot_active_wal_files FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

CREATE TABLE IF NOT EXISTS version_snapshot_deleted_wal_files (
    file_id ULID NOT NULL,
    version_snapshot_id INTEGER REFERENCES version_snapshots(id),
    PRIMARY KEY (version_snapshot_id, file_id),

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT

    -- TODO: Reference files(id) after s3 location is modeled
);
CREATE OR REPLACE TRIGGER audit_version_snapshot_deleted_wal_files BEFORE INSERT OR UPDATE OR DELETE ON version_snapshot_deleted_wal_files FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

CREATE TABLE IF NOT EXISTS version_snapshot_deleted_sst_files (
    file_id ULID NOT NULL,
    version_snapshot_id INTEGER REFERENCES version_snapshots(id),
    PRIMARY KEY (version_snapshot_id, file_id),

    -- Audit
    created_at        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_modified     TIMESTAMP,
    last_modified_by  TEXT

    -- TODO: Reference files(id) after s3 location is modeled
);
CREATE OR REPLACE TRIGGER audit_version_snapshot_deleted_sst_files BEFORE INSERT OR UPDATE OR DELETE ON version_snapshot_deleted_sst_files FOR EACH ROW EXECUTE FUNCTION last_modified_audit();

COMMIT;